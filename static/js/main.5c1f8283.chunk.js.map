{"version":3,"sources":["components/Statistics/Statistics.js","components/Controls/Controls.js","components/Section/Section.js","components/App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","Controls","options","onLeaveFeedback","keys","Object","map","key","onClick","charAt","toUpperCase","slice","Section","title","children","App","state","changeStatistics","button","setState","prev","this","countTotalFeedback","toFixed","countPositiveFeedbackPercentage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAyBeA,EAtBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OAAID,EAAQ,EAER,oCACE,oCAAUH,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,EAAvB,OAIC,iDCWMC,EAvBE,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBACrBC,EAAOC,OAAOD,KAAKF,GAEzB,OACE,oCACGE,EAAKE,KAAI,SAAAC,GAAG,OACX,4BAAQA,IAAKA,EAAKC,QAAS,kBAAML,EAAgBI,KAC9CA,EAAIE,OAAO,GAAGC,cAAgBH,EAAII,MAAM,SCKpCC,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,iCACE,4BAAKD,GACJC,ICoDUC,E,4MApDbC,MAAQ,CACNpB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPmB,iBAAmB,SAAAC,GACjB,EAAKC,UAAS,SAAAC,GACZ,OAAO,eAAGF,EAASE,EAAKF,GAAU,O,mEAIhB,IAAD,EACYG,KAAKL,MACpC,OAFmB,EACXlB,IADW,EACNF,KADM,EACAC,U,wDAGc,IAAD,EACNwB,KAAKL,MAC/B,OAA4B,KAFI,EACxBpB,KADwB,EAClBC,SACqBwB,KAAKC,sBAAsBC,QAAQ,K,+BAG9D,IAAD,EACwBF,KAAKL,MAA5BlB,EADD,EACCA,IAAKF,EADN,EACMA,KAAMC,EADZ,EACYA,QAEnB,OACE,6BACE,oCACA,kBAAC,EAAD,CAASgB,MAAM,8BACb,kBAAC,EAAD,CACEX,QAASmB,KAAKL,MACdb,gBAAiBkB,KAAKJ,oBAI1B,kBAAC,EAAD,CAASJ,MAAM,cACb,kBAAC,EAAD,CACEjB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOsB,KAAKC,qBACZtB,mBACEqB,KAAKG,kCAAoC,EACrCH,KAAKG,kCACL,U,GA5CAC,a,MCAlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.5c1f8283.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  if (total > 0) {\n    return (\n      <>\n        <p>Good: {good}</p>\n        <p>Neutral: {neutral}</p>\n        <p>Bad: {bad}</p>\n        <p>Total: {total}</p>\n        <p>Positive feedback: {positivePercentage} %</p>\n      </>\n    );\n  }\n  return <p>No feedback given</p>;\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Controls = ({ options, onLeaveFeedback }) => {\n  const keys = Object.keys(options);\n\n  return (\n    <>\n      {keys.map(key => (\n        <button key={key} onClick={() => onLeaveFeedback(key)}>\n          {key.charAt(0).toUpperCase() + key.slice(1)}\n        </button>\n      ))}\n    </>\n  );\n};\n\nControls.propTypes = {\n  options: PropTypes.shape({\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n  }),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default Controls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.object,\n};\n\nexport default Section;\n","import React, { Component } from 'react';\nimport Statistics from './Statistics/Statistics';\nimport Controls from './Controls/Controls';\nimport Section from './Section/Section';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  changeStatistics = button => {\n    this.setState(prev => {\n      return { [button]: prev[button] + 1 };\n    });\n  };\n\n  countTotalFeedback() {\n    const { bad, good, neutral } = this.state;\n    return bad + good + neutral;\n  }\n  countPositiveFeedbackPercentage() {\n    const { good, neutral } = this.state;\n    return (((good + neutral) * 100) / this.countTotalFeedback()).toFixed(2);\n  }\n\n  render() {\n    const { bad, good, neutral } = this.state;\n\n    return (\n      <div>\n        <h1>HW02</h1>\n        <Section title=\"Please your leave feedback\">\n          <Controls\n            options={this.state}\n            onLeaveFeedback={this.changeStatistics}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={\n              this.countPositiveFeedbackPercentage() > 0\n                ? this.countPositiveFeedbackPercentage()\n                : 0\n            }\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}